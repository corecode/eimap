;;; -*- mode: emacs-lisp; -*-

;;; WHAT IS THIS?

; eimap is an experiment to approach IMAP processing from a new angle.
;
; the protocol parser and generator are both formally generated from
; grammars.
;
; instead of using a request-reply approach (which does not work well
; with IMAP), eimap uses a streaming data model:
;
; data from the server is automatically parsed into usable lisp data
; structures and directly handed to a handler for the incoming data
; (not shown in the sample code below).
;
; if the application requires other data that has not been streamed in
; yet, it can request the server to send this data, using the
; `eimap-request' method (see example below).


;;; REQUIREMENTS

; (package-install 'dash)


;;; USAGE TEASER

(add-to-list 'load-path default-directory)

(require 'eimap)
(with-current-buffer (eimap-open "0x2c.org" :user "2") ; connects via IMAPS/993
  (split-window-vertically)
  (switch-to-buffer (current-buffer))

  ;; XXX need to figure out how to do the callbacks
  (while (not (eq eimap-state :authenticated))
    (sleep-for 1))
  (eimap-request '(:method SELECT :mailbox "INBOX"))
  (eimap-request '(:method FETCH :ids (:from 1 :to 4) :attr FAST))
  (let* ((query '((NOT . DELETED)))
         (req `(:method SEARCH :keys ,query)))
    (when (member "ESEARCH" eimap-capabilities)
      (setq req (plist-put req :return 'ALL)))
    (eimap-request req
                   :cbdata "foo"
                   :done (lambda (data cbdata)
                           (message "callback data %s cbdata %s"
                                    (pp-to-string data)
                                    (pp-to-string cbdata))))))

;; check out (switch-to-buffer-other-window "*Messages*")
;; that's where all the parsed data arrived
